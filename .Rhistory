a = list(matrix(0,2,3))
a
list(a, 234)
list(a, list(234))
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
for(it in 1:maxiter){
cat("it:",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
test(3,50,0.3, M = 0.5, maxiter = 100)
test(3,50,0.3, M = 0.3, maxiter = 300)
pmultinorm = function(x, y, mx, my, sx, sy){
# just two dimensional
exp(-0.5 * ((x-mx)^2/sx + (y-my)^2/sy)) / sqrt(sx*sy)
}
cluster.sample = function(s, x, y, sig2, mx, my, B, M){
N = length(s)
for(i in 1:N){
if(sum(s == s[i]) == 1){
s[s>s[i]] = s[s>s[i]] - 1
}
s_ = s[-i]; k_ = max(s_)
prob = rep(0, k_+1)
for(j in 1:k_){
nj_ = sum(s_==j)
Vj_ = 1/(1/B + nj_/sig2)
mxj_ = Vj_ * (mx/B + sum(x[-i][s_==j])/sig2)
myj_ = Vj_ * (my/B + sum(y[-i][s_==j])/sig2)
prob[j] = nj_ * pmultinorm(x[i],y[i],
mxj_,myj_,
sig2+Vj_,sig2+Vj_)
}
prob[k_+1] = M * pmultinorm(x[i],y[i],
mx,my,
sig2+B,sig2+B)
s[i] = which(as.logical(rmultinom(1,1,prob)))
}
s
}
parameter.sample = function(s, x, y, sig2, mx, my, B){
k = max(s)
res = matrix(0, k, 2)
for(j in 1:k){
nj = sum(s==j)
Vj = 1 / (1/B + nj/sig2)
mxj = Vj * (mx/B + sum(x[s==j])/sig2)
myj = Vj * (my/B + sum(y[s==j])/sig2)
x_sample = rnorm(1, mxj, sqrt(Vj))
y_sample = rnorm(1, myj, sqrt(Vj))
res[j,1] = x_sample
res[j,2] = y_sample
}
res
}
init = function(n, x, y, mx, my, B){
centers_x = rnorm(n,mx,sqrt(B))
centers_y = rnorm(n,my,sqrt(B))
cluster = rep(0, length(x))
for(i in 1:length(x)){
dist = (x[i]-centers_x)^2 + (y[i]-centers_y)^2
cluster[i] = which.min(dist)
}
cluster
}
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
for(it in 1:maxiter){
# cat("it:",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
pic = matrix(0, 28, 28)
centers = 500; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*28),round(y[i]*28)] = pic[round(x[i]*28),round(y[i]*28)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 28, 28)
centers = 500; N = 30; sig=0.2
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*28),round(y[i]*28)] = pic[round(x[i]*28),round(y[i]*28)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 28, 28)
centers = 500; N = 30; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*28),round(y[i]*28)] = pic[round(x[i]*28),round(y[i]*28)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 40, 40)
centers = 500; N = 50; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*28),round(y[i]*28)] = pic[round(x[i]*28),round(y[i]*28)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 40, 40)
centers = 500; N = 50; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*40),round(y[i]*40)] = pic[round(x[i]*40),round(y[i]*40)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 40, 40)
centers = 1000; N = 50; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*40),round(y[i]*40)] = pic[round(x[i]*40),round(y[i]*40)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
length(x)
pic = matrix(0, 40, 40)
centers = 500; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*40),round(y[i]*40)] = pic[round(x[i]*40),round(y[i]*40)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
length(x)
pic = matrix(0, 50, 50)
centers = 500; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(sqrt(abs(mx-0.5)) + sqrt(abs(my-0.5)) <= sqrt(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
collapsed.Gibbs.sampler = function(x,y, sig2, mx, my, B, M,
n_init=1, maxiter=5000){
N = length(x); K = c()
s = init(n_init, x, y, mx, my, B)
trace_s = list(); K = c(K, max(s))
mui = parameter.sample(s, x, y, sig2, mx, my, B)
trace_mui = list()
for(it in 1:maxiter){
cat("it:",it,"\r")
s = cluster.sample(s,x,y,sig2,mx,my,B,M)
trace_s[[it]] = rep(s)
K = c(K, max(s))
mui = parameter.sample(s,x,y,sig2,mx,my,B)
trace_mui[[it]] = mui
}
list(cluster = s, mui = mui, K = K,
trace_cluster=trace_s, trace_mui=trace_mui)
}
True_Centers = length(x) / N
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 500; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.2) + abs(my-0.5)^(0.2) <= 0.5^(0.2)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 1000; N = 100; sig=0.2
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.2) + abs(my-0.5)^(0.2) <= 0.5^(0.2)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 50, 50)
centers = 2000; N = 100; sig=0.2
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.25) + abs(my-0.5)^(0.25) <= 0.5^(0.25)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 50, 50)
centers = 2000; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.25) + abs(my-0.5)^(0.25) <= 0.5^(0.25)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 50, 50)
centers = 2000; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.25) + abs(my-0.5)^(0.25) <= 0.5^(0.25)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 2000; N = 100; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
pic = matrix(0, 50, 50)
centers = 2000; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 1000; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
pic = matrix(0, 50, 50)
centers = 500; N = 10; sig=0.1
x = c(); y = c()
for(i in 1:centers){
mx = runif(1); my = runif(1)
if(abs(mx-0.5)^(0.5) + abs(my-0.5)^(0.5) <= 0.5^(0.5)){
x = c(x, rnorm(N, mx, sig))
y = c(y, rnorm(N, my, sig))
}
}
for(i in 1:length(x)){
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic[round(x[i]*50),round(y[i]*50)] = pic[round(x[i]*50),round(y[i]*50)]+1
}
}
pic = pic / sum(pic)
image(pic, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Original Picture")
True_Centers = length(x) / N
print(True_Centers)
res = collapsed.Gibbs.sampler(x,y,sig2=sig^2,
0.5, 0.5, 0.5^2/2,
30, maxiter=100)
hist(res$K)
Most_frequent_k = as.numeric(names(sort(table(K),decreasing=TRUE)[1]))
Most_frequent_k = as.numeric(names(sort(table(res$K),decreasing=TRUE)[1]))
for(j in 100:1){
if(dim(res$trace_mui[[j]])[1] == Most_frequent_k)
break
}
cluster = res$trace_cluster[[j]]
mui = res$trace_mui[[j]]
weight = c()
for(i in 1:max(cluster)){
weight = c(weight, mean(cluster==i))
}
weight
mui
pic_re = matrix(0,50,50)
for(i in 1:1000){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1];my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x[i]>0 & x[i]<1 & y[i]>0 & y[i]<1){
pic_re[round(x[i]*50),round(y[i]*50)] = pic_re[round(x[i]*50),round(y[i]*50)]+1
}
}
}
pic_re = matrix(0,50,50)
for(i in 1:1000){
ce = which(as.logical(rmultinom(1,1,weight)))
mx = mui[ce,1];my = mui[ce,2]
for(t in 1:100){
x = rnorm(1,mx,0.1)
y = rnorm(1,my,0.1)
if(x>0 & x<1 & y>0 & y<1){
pic_re[round(x*50),round(y*50)] = pic_re[round(x*50),round(y*50)]+1
}
}
}
pic_re = pic_re / sum(pic_re)
image(pic_re, useRaster = TRUE, col = grey(seq(0, 1, length = 256)), main="Reconstruction Picture")
install.packages("gmp")
install.packages("tidyverse")
library(tidyverse)
install.packages("httr")
install.packages("openssl")
install.packages("openssl")
install.packages("httr")
install.packages("curl")
install.packages("httr")
install.packages("tidyverse")
install.packages("splines")
install.packages("profvis")
install.packages("dslabs")
install.packages("devtools")
install.packages("dslabs")
install.packages("imager")
install.packages("OpenImageR")
install.packages(tiff)
install.packages("tiff")
install.packages("imager")
install.packages("Cairo")
install.packages("Cairo")
install.packages("OpenImageR")
remove.packages(imager)
remove.packages("imager")
install.packages("CVXR")
install.packages("Rmpfr")
install.packages("CVXR")
setwd("~/work/curve_fitting/curve_fitting")
library(OpenImageR)
xx = readImage("test.png")
yy = resizeImage(xx, 100,100)
yy = resizeImage(xx[,,1], 100,100)
dim(yy)
image(yy)
max(yy)
source('~/work/curve_fitting/curve_fitting/wasserstein_fit.R', echo=TRUE)
source('~/work/curve_fitting/curve_fitting/wasserstein_fit.R', echo=TRUE)
